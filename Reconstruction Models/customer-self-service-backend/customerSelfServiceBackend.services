import datatypes from "customerSelfServiceBackend.data" as customerSelfServiceBackend
import microservices from "../customer-core/customerCore.services" as customerCoreServices

functional microservice com.lakesidemutual.customerselfservice.CustomerSelfServiceBackend {
	required microservices {
		customerCoreServices::com.lakesidemutual.customercore.CustomerCore
	}
	interface authenticationController {
		---
		Authenticate a user based on a given email address and password.

		@required authenticationRequest the email and password used to authenticate the user
		---
		authenticationRequest(
			sync authenticationRequest
				: customerSelfServiceBackend::customerSelfService.AuthenticationRequestDto,
			sync out authenticationResponse
				: customerSelfServiceBackend::customerSelfService.AuthenticationResponseDto,

			sync out fault authenticationException
				: customerSelfServiceBackend::customerSelfService.AuthenticationError
		);

		---
		Create a new user.

		@required registration the email and password used to create a new user
		---
		signupUser(
			sync registration : customerSelfServiceBackend::customerSelfService.SignupRequestDto,
			sync out userResponse : customerSelfServiceBackend::customerSelfService.UserResponseDto,
			sync out fault userAlreadyExists : string
		);
	}

	interface cityStaticDataHolder {
		---
		Get the cities for a particular postal code.

		@required postcalCode the postal code
		---
		getCitiesForPostalCode(
			sync postcalCode : string,
			sync out result : customerSelfServiceBackend::customerSelfService.CitiesResponseDto
		);
	}

	interface customerInformationHolder {
		---
		Change a customer's address.

		@required customerId the customer's unique id
		@required requestDto the customer's new address
		---
		changeAddress(
			sync customerId : customerSelfServiceBackend::customerSelfService.CustomerId,
			sync requestDto : customerSelfServiceBackend::customerSelfService.AddressDto,
			sync out result : customerSelfServiceBackend::customerSelfService.AddressDto
		);

		---
		Get customer with a given customer id.

		@required customerId the customer's unique id
		---
		getCustomer(
			sync customerId : customerSelfServiceBackend::customerSelfService.CustomerId,
			sync out result : customerSelfServiceBackend::customerSelfService.CustomerDto,
			sync out fault customerNotFound : string
		);

		---
		Complete the registration of a new customer.

		@required requestDto the customer's profile information
		---
		registerCustomer(
			sync requestDto
				: customerSelfServiceBackend::customerSelfService.CustomerRegistrationRequestDto,
			sync out result : customerSelfServiceBackend::customerSelfService.CustomerDto
		);
	}

	interface userInformationHolder {
		---
		Get the user details for the currently logged-in user.
		---
		getCurrentUser(
			sync out response : customerSelfServiceBackend::customerSelfService.UserResponseDto
		);
	}
}