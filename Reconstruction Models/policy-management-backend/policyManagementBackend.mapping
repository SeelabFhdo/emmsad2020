import technology from "../technology/java.technology" as java
import technology from "../technology/eadr.technology" as eadr
import technology from "../technology/map.technology" as map
import microservices from "policyManagementBackend.services" as policyManagementBackendServices

@technology(java)
@technology(eadr)
type policyManagementBackendServices::policyManagementBackend::policyManagement.CustomerId {
	aspects {
		java::_aspects.Embeddable;
		eadr::_aspects.MADR(
			value = 2,
			title = "Separation between domain data model and infrastructure data model",
			contextAndProblem = "
				JPA / Spring Data annotations usually belong into a separate data model in the
				infrastructure layer
			",
			alternatives = "
				Keep the JPA / Spring Data annotations in the domain data model,
				Implement a separate data model with JPA / Spring Data annotations in the
				infrastructure layer
			",
			chosenAlternative = "Keep the JPA / Spring Data annotations in the domain data model",
			justification = "
				The relatively small size of this application does not warrant the additional
				complexity (yet).
			"
		);
	}
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend
	::policyManagement.InsuringAgreementEntity {
	aspects { java::_aspects.Table("insuringagreements"); }

	agreementItems { aspects { java::_aspects.OneToMany; } }
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend::policyManagement.InsuringAgreementItem {
	aspects { java::_aspects.Table("insuranceagreementitems"); }
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend::policyManagement.MoneyAmount {
	aspects { java::_aspects.Embeddable; }

	amount : java::_types.BigDecimal;
	currency : java::_types.Currency;
}

@technology(java)
@technology(eadr)
type policyManagementBackendServices::policyManagementBackend::policyManagement.PolicyAggregateRoot {
	aspects {
		java::_aspects.Table("insurancepolicies");
		eadr::_aspects.MADR(
			value = 2,
			title = "Separation between domain data model and infrastructure data model",
			contextAndProblem = "
				JPA / Spring Data annotations usually belong into a separate data model in the
				infrastructure layer
			",
			alternatives = "
				Keep the JPA / Spring Data annotations in the domain data model,
				Implement a separate data model with JPA / Spring Data annotations in the
				infrastructure layer
			",
			chosenAlternative = "Keep the JPA / Spring Data annotations in the domain data model",
			justification = "
				The relatively small size of this application does not warrant the additional
				complexity (yet).
			"
		);
	}

	id { aspects { java::_aspects.EmbeddedId; } }
	FIELD_CREATION_DATE { aspects { java::_aspects.Constant; } }
	policyPeriod { aspects { java::_aspects.Embedded; } }
	policyType { aspects { java::_aspects.Embedded; } }
	insuringAgreement { aspects { java::_aspects.OneToOne; } }
	customerId {
		aspects {
			java::_aspects.Embedded;
			java::_aspects.AttributeOverrideColumn(name="id", column="customerId");
		}
	}
	policyLimit {
		aspects {
			java::_aspects.Embedded;
			java::_aspects.AttributeOverrideColumn(name="amount", column="limitAmount");
			java::_aspects.AttributeOverrideColumn(name="currency", column="limitCurrency");
		}
	}
	insurancePremium {
		aspects {
			java::_aspects.Embedded;
			java::_aspects.AttributeOverrideColumn(name="amount", column="premiumAmount");
			java::_aspects.AttributeOverrideColumn(name="currency", column="premiumCurrency");
		}
	}
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend::policyManagement.PolicyId {
	aspects { java::_aspects.Embeddable; }
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend::policyManagement.PolicyPeriod {
	aspects { java::_aspects.Embeddable; }
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend
	::policyManagement.CustomerCoreService {
	customerCoreBaseURL { aspects { java::_aspects.Value("${customercore.baseURL}"); } }
	apiKeyHeader { aspects { java::_aspects.Value("${apikey.header}"); } }
	apikeyValue { aspects { java::_aspects.Value("${apikey.value}"); } }
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend
	::policyManagement.PolicyRepository {
	op findFirstByCustomerIdOrderByCreationDateDesc {
		return type { aspects { java::_aspects.Optional; } }
	}
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend
	::policyManagement.RiskManagementService {
	queueName { aspects { java::_aspects.Value("${riskmanagement.queueName}"); } }
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend::policyManagement.CustomerDto {
	aspects { java::_aspects.ResourceSupport; }

	customerProfile {
		aspects { java::_aspects.JsonUnwrapped; }
	}
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend::policyManagement.CustomerProfileDto {
	currentAddress { aspects { java::_aspects.JsonUnwrapped; } }
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend::policyManagement.CustomersDto {
	aspects { java::_aspects.ResourceSupport; }
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend
	::policyManagement.PaginatedCustomerResponseDto {
	aspects { java::_aspects.ResourceSupport; }
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend::policyManagement.CreatePolicyRequestDto {
	customerId { aspects { java::_aspects.Valid; } }
	policyPeriod { aspects { java::_aspects.Valid; } }
	policyType { aspects { java::_aspects.Valid; } }
	policyLimit { aspects { java::_aspects.Valid; } }
	insurancePremium { aspects { java::_aspects.Valid; } }
	insuringAgreement { aspects { java::_aspects.Valid; } }
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend::policyManagement.InsuringAgreementDto {
	agreementItems { aspects { java::_aspects.NotNull; } }
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend
	::policyManagement.InsuringAgreementItemDto {
	title { aspects { java::_aspects.Valid; } }
	description { aspects { java::_aspects.Valid; } }
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend::policyManagement.MoneyAmountDto {
	amount : java::_types.BigDecimal {
		aspects {
			java::_aspects.DecimalMax(value="1000000000000");
			java::_aspects.DecimalMin(value="0");
		}
	}
}

@technology(java)
@technology(map)
type policyManagementBackendServices::policyManagementBackend
	::policyManagement.PaginatedPolicyResponseDto {
	aspects {
		java::_aspects.ResourceSupport;
		map::_aspects.Pagination;
	}
}

@technology(java)
type policyManagementBackendServices::policyManagementBackend::policyManagement.PolicyDto {
	customer : java::_types.Object;
	expandable {
		aspects {
			java::_aspects.Array;
			java::_aspects.JsonProperty("_expandable");
		}
	}
}

@technology(java)
@technology(map)
policyManagementBackendServices::com.lakesidemutual.policymanagement.PolicyManagementBackend {
	aspects {
		java::_aspects.ApplicationName("Policy Management Backend");
		java::_aspects.JacksonConfiguration(INDENT_OUTPUT=true, defaultPropertyInclusion="NON_NULL");
		java::_aspects.DatasourceConfiguration(
			url="jdbc:h2:file:./policymanagement",
			username="sa",
			password="sa",
			driverClassName="org.h2.Driver"
		);
		java::_aspects.HibernateConfiguration("create-drop");
		java::_aspects.JpaShowSql;
		java::_aspects.CustomProperty(name="customercore.baseURL", value="http://localhost:8110");
		java::_aspects.CustomProperty(
			name="riskmanagement.stompBrokerBindAddress",
			value="stomp://localhost:61613"
		);
		java::_aspects.CustomProperty(
			name="riskmanagement.tcpBrokerBindAddress",
			value="tcp://localhost:61616"
		);
		java::_aspects.CustomProperty(name="riskmanagement.queueName", value="newpolicies");
	}
	
	interface customerInformationHolder {
		endpoints {
			java::_protocols.rest: "/customers";
		}
		
		aspects {
			map::_aspects.InformationHolderResource;
			map::_aspects.MasterDataHolder;
		}
	}
	
	interface policyInformationHolder {
		endpoints {
			java::_protocols.rest: "/policies";
		}
		
		aspects {
			map::_aspects.InformationHolderResource;
			map::_aspects.MasterDataHolder;
		}		
	}
	
	interface riskComputation {
		endpoints {
			java::_protocols.rest: "/riskfactor";
		}
		
		aspects {
			map::_aspects.ComputationFunction;
		}
	}
	
	operation customerInformationHolder.getCustomers {
		aspects {
			java::_aspects.GetMapping;
		}
		
		parameters {
			primitive filter { aspects { java::_aspects.RequestParam(value="filter"); } }
			primitive limit { aspects { 
				java::_aspects.RequestParam(value="limit", defaultValue="10");
			} }
			primitive offset { aspects { 
				java::_aspects.RequestParam(value="offset", defaultValue="0");
			} }
			complex paginatedResponseOut { aspects { java::_aspects.ResponseEntity; } }
		}
	}
	
	operation customerInformationHolder.getCustomer {
		endpoints {
			java::_protocols.rest: "/{customerIdDto}";
		}
		
		aspects {
			java::_aspects.GetMapping;
		}
		
		parameters {
			complex customerIdDto { aspects { java::_aspects.PathVariable; } }
			complex customer { aspects { java::_aspects.ResponseEntity; } }
			primitive customerNotFound { aspects { java::_aspects.ResponseStatus("NOT_FOUND"); } }
		}
	}
	
	operation customerInformationHolder.getPolicyHistory {
		endpoints {
			java::_protocols.rest: "/{customerIdDto}/policy-history";
		}
		
		aspects {
			java::_aspects.GetMapping;
		}
		
		parameters {
			complex customerIdDto { aspects { java::_aspects.PathVariable; } }
			primitive expand { aspects { java::_aspects.RequestParam(value="expand"); } }
			complex policyDtos { aspects { java::_aspects.ResponseEntity; } }
		}
	}
	
	operation customerInformationHolder.getActivePolicy {
		aspects {
			java::_aspects.GetMapping;
		}
		
		parameters {
			complex customerIdDto { aspects { java::_aspects.PathVariable; } }
			primitive expand { aspects { java::_aspects.RequestParam(value="expand"); } }
			complex policyDto { aspects { java::_aspects.ResponseEntity; } }
		}
	}
	
	operation policyInformationHolder.createPolicy {
		aspects {
			java::_aspects.PostMapping;
		}
		
		parameters {
			complex createPolicyDto { aspects { java::_aspects.Valid; java::_aspects.RequestBody; } }
			complex policyDto { aspects { java::_aspects.ResponseEntity; } }
			primitive customerNotFound { aspects { java::_aspects.ResponseStatus("FAILED_DEPENDENCY"); } }
		}
	}
	
	operation policyInformationHolder.getPolicies {
		aspects {
			java::_aspects.GetMapping;
		}
		
		parameters {
			primitive limit { aspects { 
				java::_aspects.RequestParam(value="limit", defaultValue="10");
			} }
			primitive offset { aspects { 
				java::_aspects.RequestParam(value="offset", defaultValue="0");
			} }
			primitive expand { aspects { java::_aspects.RequestParam(value="expand"); } }
			complex paginatedPolicyResponse { aspects { java::_aspects.ResponseEntity; } }
		}
	}
	
	operation policyInformationHolder.getPolicy {
		endpoints {
			java::_protocols.rest: "/{policyId}";
		}
		
		aspects {
			java::_aspects.GetMapping;
		}
		
		parameters {
			complex policyId { aspects { java::_aspects.PathVariable; } }
			primitive expand { aspects { java::_aspects.RequestParam(value="expand"); } }
			complex response { aspects { java::_aspects.ResponseEntity; } }
		}
	}
	
	operation riskComputation.computeRiskFactor {
		endpoints {
			java::_protocols.rest: "/computer";			
		}
		
		aspects {
			java::_aspects.PostMapping;
		}
		
		parameters {
			complex riskFactorRequest { aspects { java::_aspects.Valid; java::_aspects.RequestBody; } }
		}
	}
}